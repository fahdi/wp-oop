import os

# List of markdown files to be created
files = [
    'README.md',
    'classes.md',
    'encapsulation.md',
    'inheritance.md',
    'polymorphism.md',
    'abstraction.md',
    'namespaces.md',
    'exceptions.md',
    'design-patterns.md',
    'real-world-applications.md'
]

# Initial content for each markdown file
content = {
    'README.md': '# Object-Oriented Programming (OOP) in WordPress - A Beginner\'s Guide\n\nWelcome to the OOP in WordPress guide. This guide will help you understand the fundamental concepts of object-oriented programming within the WordPress ecosystem.\n\n## Introduction\nObject-Oriented Programming (OOP) is a programming paradigm that uses "objects" to design applications and programs. The main concepts of OOP are:\n\n1. **Classes and Objects**\n2. **Encapsulation**\n3. **Inheritance**\n4. **Polymorphism**\n5. **Abstraction**\n\n## Table of Contents\n1. [Classes and Objects](classes.md)\n    - [Introduction to Classes and Objects](classes.md#introduction-to-classes-and-objects)\n    - [Defining a Class](classes.md#defining-a-class)\n    - [Creating Objects](classes.md#creating-objects)\n    - [Using Constructors](classes.md#using-constructors)\n    - [Class Methods](classes.md#class-methods)\n    - [Properties](classes.md#properties)\n    - [Static Properties and Methods](classes.md#static-properties-and-methods)\n    - [Constants](classes.md#constants)\n    - [Example: Custom Post Type Class](classes.md#example-custom-post-type-class)\n    - [Example: Shortcode Class](classes.md#example-shortcode-class)\n    - [Example: Widget Class](classes.md#example-widget-class)\n    - [Example: Admin Page Class](classes.md#example-admin-page-class)\n\n2. [Encapsulation](encapsulation.md)\n    - [Introduction to Encapsulation](encapsulation.md#introduction-to-encapsulation)\n    - [Public, Private, and Protected Access Modifiers](encapsulation.md#public-private-and-protected-access-modifiers)\n    - [Getters and Setters](encapsulation.md#getters-and-setters)\n    - [Example: Encapsulating Custom Post Type Logic](encapsulation.md#example-encapsulating-custom-post-type-logic)\n    - [Example: Encapsulating Widget Logic](encapsulation.md#example-encapsulating-widget-logic)\n\n3. [Inheritance](inheritance.md)\n    - [Introduction to Inheritance](inheritance.md#introduction-to-inheritance)\n    - [Simple Inheritance](inheritance.md#simple-inheritance)\n    - [The `parent` Keyword](inheritance.md#the-parent-keyword)\n    - [Overriding Methods](inheritance.md#overriding-methods)\n    - [Final Keyword](inheritance.md#final-keyword)\n    - [Traits](inheritance.md#traits)\n    - [Example: Extending the WP_Widget Class](inheritance.md#example-extending-the-wp_widget-class)\n    - [Example: Creating a Base Class for Admin Pages](inheritance.md#example-creating-a-base-class-for-admin-pages)\n\n4. [Polymorphism](polymorphism.md)\n    - [Introduction to Polymorphism](polymorphism.md#introduction-to-polymorphism)\n    - [Method Overriding](polymorphism.md#method-overriding)\n    - [Interfaces](polymorphism.md#interfaces)\n    - [Abstract Classes and Methods](polymorphism.md#abstract-classes-and-methods)\n    - [Example: Interface for Custom Post Types](polymorphism.md#example-interface-for-custom-post-types)\n    - [Example: Abstract Class for Reusable Components](polymorphism.md#example-abstract-class-for-reusable-components)\n\n5. [Abstraction](abstraction.md)\n    - [Introduction to Abstraction](abstraction.md#introduction-to-abstraction)\n    - [Abstract Classes](abstraction.md#abstract-classes)\n    - [Abstract Methods](abstraction.md#abstract-methods)\n    - [Example: Abstract Class for Admin Pages](abstraction.md#example-abstract-class-for-admin-pages)\n    - [Implementing Abstract Methods](abstraction.md#implementing-abstract-methods)\n\n6. [Namespaces](namespaces.md)\n    - [Introduction to Namespaces](namespaces.md#introduction-to-namespaces)\n    - [Defining Namespaces](namespaces.md#defining-namespaces)\n    - [Using Namespaces](namespaces.md#using-namespaces)\n    - [Namespace Aliases](namespaces.md#namespace-aliases)\n    - [Example: Organizing Plugin Code with Namespaces](namespaces.md#example-organizing-plugin-code-with-namespaces)\n\n7. [Exception Handling](exceptions.md)\n    - [Introduction to Exception Handling](exceptions.md#introduction-to-exception-handling)\n    - [Try, Catch, and Finally](exceptions.md#try-catch-and-finally)\n    - [Custom Exceptions](exceptions.md#custom-exceptions)\n    - [Example: Handling Exceptions in a Plugin](exceptions.md#example-handling-exceptions-in-a-plugin)\n\n8. [Design Patterns](design-patterns.md)\n    - [Introduction to Design Patterns](design-patterns.md#introduction-to-design-patterns)\n    - [Singleton Pattern](design-patterns.md#singleton-pattern)\n    - [Factory Pattern](design-patterns.md#factory-pattern)\n    - [Observer Pattern](design-patterns.md#observer-pattern)\n    - [Strategy Pattern](design-patterns.md#strategy-pattern)\n    - [Example: Using Design Patterns in WordPress](design-patterns.md#example-using-design-patterns-in-wordpress)\n\n9. [Real-World Applications](real-world-applications.md)\n    - [Building a Custom Post Type Plugin](real-world-applications.md#building-a-custom-post-type-plugin)\n    - [Creating a Custom Widget](real-world-applications.md#creating-a-custom-widget)\n    - [Developing a Shortcode Plugin](real-world-applications.md#developing-a-shortcode-plugin)\n    - [Building an Admin Page Plugin](real-world-applications.md#building-an-admin-page-plugin)\n',
    'classes.md': '# Classes and Objects\n\n## Introduction to Classes and Objects\n\n## Defining a Class\n\n## Creating Objects\n\n## Using Constructors\n\n## Class Methods\n\n## Properties\n\n## Static Properties and Methods\n\n## Constants\n\n## Examples\n\n### Custom Post Type Class\n\n### Shortcode Class\n\n### Widget Class\n\n### Admin Page Class\n',
    'encapsulation.md': '# Encapsulation\n\n## Introduction to Encapsulation\n\n## Public, Private, and Protected Access Modifiers\n\n## Getters and Setters\n\n## Examples\n\n### Encapsulating Custom Post Type Logic\n\n### Encapsulating Widget Logic\n',
    'inheritance.md': '# Inheritance\n\n## Introduction to Inheritance\n\n## Simple Inheritance\n\n## The `parent` Keyword\n\n## Overriding Methods\n\n## Final Keyword\n\n## Traits\n\n## Examples\n\n### Extending the WP_Widget Class\n\n### Creating a Base Class for Admin Pages\n',
    'polymorphism.md': '# Polymorphism\n\n## Introduction to Polymorphism\n\n## Method Overriding\n\n## Interfaces\n\n## Abstract Classes and Methods\n\n## Examples\n\n### Interface for Custom Post Types\n\n### Abstract Class for Reusable Components\n',
    'abstraction.md': '# Abstraction\n\n## Introduction to Abstraction\n\n## Abstract Classes\n\n## Abstract Methods\n\n## Examples\n\n### Abstract Class for Admin Pages\n\n### Implementing Abstract Methods\n',
    'namespaces.md': '# Namespaces\n\n## Introduction to Namespaces\n\n## Defining Namespaces\n\n## Using Namespaces\n\n## Namespace Aliases\n\n## Examples\n\n### Organizing Plugin Code with Namespaces\n',
    'exceptions.md': '# Exception Handling\n\n## Introduction to Exception Handling\n\n## Try, Catch, and Finally\n\n## Custom Exceptions\n\n## Examples\n\n### Handling Exceptions in a Plugin\n',
    'design-patterns.md': '# Design Patterns\n\n## Introduction to Design Patterns\n\n## Singleton Pattern\n\n## Factory Pattern\n\n## Observer Pattern\n\n## Strategy Pattern\n\n## Examples\n\n### Using Design Patterns in WordPress\n',
    'real-world-applications.md': '# Real-World Applications\n\n## Building a Custom Post Type Plugin\n\n### Requirements and Setup\n\n### Implementation Steps\n\n## Creating a Custom Widget\n\n### Requirements and Setup\n\n### Implementation Steps\n\n## Developing a Shortcode Plugin\n\n### Requirements and Setup\n\n### Implementation Steps\n\n## Building an Admin Page Plugin\n\n### Requirements and Setup\n\n### Implementation Steps\n'
}

# Create each file if it doesn't exist and write the corresponding content
for file in files:
    if not os.path.exists(file):
        with open(file, 'w') as f:
            f.write(content[file])
        print(f"Created {file}")
    else:
        print(f"{file} already exists")

